{
    parserClass='run.gleam.lang.core.parser.GleamParser'
    parserUtilClass='run.gleam.lang.core.parser.GleamParserUtil'

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Gleam"
    psiImplClassSuffix="Impl"
    psiPackage="run.gleam.lang.core.psi"
    psiImplPackage="run.gleam.lang.core.psi.impl"

    elementTypeHolderClass="run.gleam.lang.core.psi.GleamTypes"
    elementTypeClass="run.gleam.lang.core.psi.GleamElementType"
    tokenTypeClass="run.gleam.lang.core.psi.GleamTokenType"

    tokens = [
        // Keywords
        PUB = "pub"
        FN = "fn"
        LET = "let"
        CASE = "case"
        IMPORT = "import"
        TYPE = "type"
        ASSERT = "assert"
        TODO = "todo"
        CONST = "const"
        EXTERNAL = "external"

        // Regexp
        IDENTIFIER = "regexp:[_a-z][_0-9a-z]*"
        UPPER_IDENTIFIER = "regexp:[A-Z][_0-9a-zA-Z]*"

        COMMENT = "regexp://([^\n]*)?"
        DOC_COMMENT = "regexp:///([^\n]*)?"
        MODULE_COMMENT = "regexp:////([^\n]*)?"

        NUMBER = "regexp:[0-9]*"
        STRING_CONTENT = "regexp:\"([^\\\\\\\"]|\\\\[^efnrt\\\"\\\\])+\"" // TODO improve matching for string content

        // Chars
        LBRACE      =  '{'
        RBRACE      =  '}'
        LBRACK      =  '['
        RBRACK      =  ']'
        LPAREN      =  '('
        RPAREN      =  ')'

        COLON       =  ':'

        COMMA       =  ','

        EQ          =  '='
        EQEQ        =  '=='

        BANG        =  '!'

        PLUS        =  '+'
        MINUS       =  '-'

        OR          =  '||'
        AND         =  '&&'

        LT          =  '<'
        GT          =  '>'

        MUL         =  '*'
        DIV         =  '/'
        DIVDIV      =  '//'

        DOT         =  '.'
        DOTDOT      =  '..'

        FAT_ARROW   =  '=>'
        ARROW       =  '->'

        QUOTE       =  '"'

        PIPE        =  '|>'
    ]
}

gleamFile ::= topLevelDefinition*
private topLevelDefinition ::=
    importStatement
    | typeStatement
    | functionStatement
    | COMMENT
    | ([PUB] constantStatement)

private innerDefinition ::=
    COMMENT
    | variableStatement
    | constantStatement
    | functionCall

typeIdentifier ::= [IDENTIFIER DOT] UPPER_IDENTIFIER [LPAREN typeIdentifierInnerType [typeIdentifierInnerType*] RPAREN]
typeIdentifierInnerType ::= typeIdentifier [COMMA]

private constructorElement ::= constructorIdentifier typeIdentifier [COMMA]
constructorIdentifier ::= IDENTIFIER COLON

importStatement ::= IMPORT importStatementElement
importStatementElement ::= IDENTIFIER ('/' IDENTIFIER [importStatementTypes])*
importStatementTypes ::= DOT LBRACE ((UPPER_IDENTIFIER|IDENTIFIER) [COMMA])* RBRACE

// TODO improve type statement parsing
typeStatement ::= [PUB] TYPE UPPER_IDENTIFIER LBRACE (typeStatementConstructor)* RBRACE
typeStatementConstructor ::= UPPER_IDENTIFIER LPAREN (constructorElement)* RPAREN

functionStatement ::= [PUB] FN IDENTIFIER LPAREN [(constructorElement)*] RPAREN [functionStatementType] LBRACE [innerDefinition*] RBRACE
functionStatementType ::= ARROW typeIdentifier

variableStatement ::= LET IDENTIFIER EQ variableValue
constantStatement ::= CONST IDENTIFIER EQ variableValue

// TODO parse value inside string
variableValue ::= functionCall | UPPER_IDENTIFIER | typeIdentifier | IDENTIFIER | NUMBER | STRING_CONTENT

functionCall ::= [IDENTIFIER DOT] IDENTIFIER LPAREN [functionCallParam*] RPAREN [PIPE functionCall]
functionCallParam ::= ((IDENTIFIER COLON variableValue) | variableValue)[COMMA]